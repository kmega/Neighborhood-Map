{"version":3,"sources":["GoogleMap.js","SearchOption.js","App.js","registerServiceWorker.js","index.js"],"names":["GoogleApiWrapper","apiKey","props","google","places","query","clickedMarker","currentPlace","details","markerShowing","markerId","error","initialCenter","lat","lng","zoom","style","height","width","filter","place","name","toLowerCase","indexOf","map","key","position","onClick","markerInfo","bind","ref","animation","maps","Animation","DROP","visible","marker","onClose","defaultSetup","className","tabIndex","Object","keys","length","location","address1","city","country","rating","review_count","SearchOption","toggle","showSearchBox","id","onKeyPress","role","aria-labelledby","type","placeholder","value","onChange","e","changeQuery","target","showShop","App","state","markers","onMarkerClick","setState","setAnimation","fetch","headers","then","res","json","catch","data","businesses","setTimeout","prevState","showMenu","this","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.44e0d42e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Map,\r\n    Marker,\r\n    InfoWindow,\r\n    GoogleApiWrapper\r\n} from 'google-maps-react';\r\nimport './App.css';\r\n// GoogleMap component starts here.\r\nconst GoogleMap = (props) => {\r\n    const {\r\n        google,\r\n        places,\r\n        query,\r\n        clickedMarker,\r\n        currentPlace,\r\n        details,\r\n        markerShowing,\r\n        markerId,\r\n        error\r\n    } = props;\r\n    return (\r\n        // Map that is set lat, lng, zoom and style.\r\n        <\r\n        Map google = {\r\n            google\r\n        }\r\n        initialCenter = {\r\n            {\r\n                lat: 40.71154990146508,\r\n                lng: -73.96724191368207\r\n            }\r\n        }\r\n        zoom = {\r\n            13\r\n        }\r\n        style = {\r\n            {\r\n                height: '100%',\r\n                width: '100%'\r\n            }\r\n        } >\r\n        {\r\n            // Filter names and place markers at their positions.\r\n            places.filter(place => place.name.toLowerCase().indexOf(query.toLowerCase()) >= 0).map(place => {\r\n                return ( <\r\n                    Marker key = {\r\n                        place.name\r\n                    }\r\n                    name = {\r\n                        place.name\r\n                    }\r\n                    position = {\r\n                        place.position\r\n                    }\r\n                    onClick = {\r\n                        props.markerInfo.bind(this)\r\n                    }\r\n                    ref = {\r\n                        markerId\r\n                    }\r\n                    animation = {\r\n                        google.maps.Animation.DROP\r\n                    }\r\n                    />\r\n                )\r\n            })\r\n        }\r\n        <\r\n        InfoWindow visible = {\r\n            markerShowing\r\n        }\r\n        marker = {\r\n            clickedMarker\r\n        }\r\n        onClose = {\r\n            props.defaultSetup\r\n        } >\r\n        <\r\n        section >\r\n        <\r\n        h1 className = 'name' > {\r\n            currentPlace.name\r\n        } < /h1> { /* In App.js if there is an error then show div below. */ } {\r\n            error === true ?\r\n                <\r\n                div tabIndex = {\r\n                    2\r\n                } > 404 NOT FOUND - Please check your internet connection. < /div> :\r\n                // Method that is using Object.keys which stores array of keys as mentioned here https://javascript.info/keys-values-entries.\r\n                Object.keys(details).length > 0 ?\r\n                // Place details.\r\n                <\r\n                section tabIndex = {\r\n                    2\r\n                } >\r\n                <\r\n                p tabIndex = {\r\n                    2\r\n                } > < strong > Address : < /strong>{ details.location.address1 } </p >\r\n                <\r\n                p tabIndex = {\r\n                    2\r\n                } > < strong > City: < /strong>{ details.location.city }, { details.location.country }</p >\r\n                <\r\n                p tabIndex = {\r\n                    2\r\n                } > < strong > Rating: < /strong>{ details.rating }</p >\r\n                <\r\n                p tabIndex = {\r\n                    2\r\n                } > < strong > Reviews: < /strong>{ details.review_count }</p >\r\n                <\r\n                /section> : <\r\n                strong > ... < /strong>\r\n        }\r\n        <\r\n        /section>\r\n        <\r\n        /InfoWindow>\r\n        <\r\n        /Map>\r\n    );\r\n}\r\n\r\n// Default API wrapper for Google Map.\r\nexport default GoogleApiWrapper({\r\n    apiKey: ('AIzaSyDujre2Xf7QiP1NgyfN2_LEUTXMRduASww')\r\n})(GoogleMap)\r\n","import React from 'react';\r\nimport './App.css';\r\n// SearchOption component starts here.\r\nconst SearchOption = (props) => {\r\n    const {\r\n        places,\r\n        query,\r\n        toggle,\r\n        showSearchBox\r\n    } = props;\r\n    return ( <\r\n        nav id = 'nav' \r\n        className = {\r\n            toggle\r\n        } >\r\n        { /* Icon from 'Font Awesome'. */ } <\r\n        div className = 'fa fa-th-list'\r\n        onClick = {\r\n            showSearchBox\r\n        }\r\n        onKeyPress = {\r\n            showSearchBox\r\n        }\r\n        role = 'button'\r\n        tabIndex = {\r\n            1\r\n        }\r\n        / >\r\n        { /* Search box for searching purposes. */ } <\r\n        input\r\n        aria-labelledby = 'Searching Box'\r\n        role = 'search'\r\n        type = 'text'\r\n        placeholder = 'Searching Box'\r\n        className = 'searching-box'\r\n        value = {\r\n            query\r\n        }\r\n        onChange = {\r\n            (e) => props.changeQuery(e.target.value)\r\n        }\r\n        tabIndex = {\r\n            2\r\n        }\r\n        />\r\n        { /* List of searchable shops with a simple filter. */ } <\r\n        ul role = 'menu'\r\n        className = 'place-list' > {\r\n            // Like in GoogleMap.js filter names and place markers at their positions.\r\n            places.filter(place => place.name.toLowerCase().indexOf(query.toLowerCase()) >= 0)\r\n            .map(place => {\r\n                return (\r\n                    <\r\n                    li role = 'menuitem'\r\n                    tabIndex = {\r\n                        3\r\n                    }\r\n                    className = 'place'\r\n                    key = {\r\n                        place.name\r\n                    }\r\n                    onClick = {\r\n                        props.showShop.bind(this, place.name)\r\n                    }\r\n                    onKeyPress = {\r\n                        props.showShop.bind(this, place.name)\r\n                    } >\r\n                    {\r\n                        place.name\r\n                    } <\r\n                    /li>\r\n                )\r\n            })\r\n        }\r\n        <\r\n        /ul>\r\n        <\r\n        /nav>\r\n    );\r\n}\r\n\r\nexport default SearchOption;\r\n","import React, {\r\n    Component\r\n} from 'react';\r\n// Import GoogleMap component.\r\nimport GoogleMap from './GoogleMap';\r\n// Import SearchOption component.\r\nimport SearchOption from './SearchOption';\r\nimport './App.css';\r\n// App component starts here.\r\nclass App extends Component {\r\n    // State for different settings.\r\n    state = {\r\n        // Places that are known in Yelp Fusion API.\r\n        places: [{\r\n                name: 'Lakou Cafe',\r\n                position: {\r\n                    lat: 40.67200489142444,\r\n                    lng: -73.93059745430946\r\n                }\r\n            },\r\n            {\r\n                name: 'Coffee Project New York',\r\n                position: {\r\n                    lat: 40.72708904158265,\r\n                    lng: -73.98938208818436\r\n                }\r\n            },\r\n            {\r\n                name: 'Bibble & Sip',\r\n                position: {\r\n                    lat: 40.76290379577729,\r\n                    lng: -73.98533597588539\r\n                }\r\n            },\r\n            {\r\n                name: 'Polo Caffe',\r\n                position: {\r\n                    lat: 40.66620985314623,\r\n                    lng: -73.97861033678055\r\n                }\r\n            },\r\n            {\r\n                name: 'Brooklyn Roasting Company',\r\n                position: {\r\n                    lat: 40.70425544458103,\r\n                    lng: -73.98635789752007\r\n                }\r\n            },\r\n            {\r\n                name: 'Absolute Coffee',\r\n                position: {\r\n                    lat: 40.68819415095485,\r\n                    lng: -73.98763731122017\r\n                }\r\n            },\r\n            {\r\n                name: 'Voyager Espresso',\r\n                position: {\r\n                    lat: 40.70881201448755,\r\n                    lng: -74.00669708848\r\n                }\r\n            },\r\n            {\r\n                name: 'Rebel Coffee',\r\n                position: {\r\n                    lat: 40.73783173312936,\r\n                    lng: -74.00475785136223\r\n                }\r\n            },\r\n            {\r\n                name: '12 Corners Coffee',\r\n                position: {\r\n                    lat: 40.713863322507656,\r\n                    lng: -73.99040803313255\r\n                }\r\n            },\r\n            {\r\n                name: 'Bluestone Lane',\r\n                position: {\r\n                    lat: 40.73579226932857,\r\n                    lng: -74.00089278817177\r\n                }\r\n            },\r\n            {\r\n                name: 'dot & line',\r\n                position: {\r\n                    lat: 40.684141611296226,\r\n                    lng: -73.98362472653389\r\n                }\r\n            },\r\n            {\r\n                name: 'Blank Slate Tea',\r\n                position: {\r\n                    lat: 40.745300087727664,\r\n                    lng: -73.98437574505806\r\n                }\r\n            },\r\n            {\r\n                name: 'Laughing Man Coffee & Tea',\r\n                position: {\r\n                    lat: 40.71727266255551,\r\n                    lng: -74.01012495160103\r\n                }\r\n            }\r\n        ],\r\n        // Markers array.\r\n        markers: [],\r\n        // Marker that has been clicked.\r\n        clickedMarker: {},\r\n        // Currently selected place.\r\n        currentPlace: '',\r\n        // Details returned from Yelp Fusion API.\r\n        details: {},\r\n        // User input.\r\n        query: '',\r\n        // Initally, I used jQuery to display searchOption, but ReactJs state is just better for this.\r\n        toggle: '',\r\n        // Error boolean.\r\n        error: false\r\n    };\r\n    // On marker click take props and clicked marker and set their state.\r\n    onMarkerClick = (props, marker) => {\r\n        this.setState({\r\n            markerShowing: true,\r\n            currentPlace: props,\r\n            clickedMarker: marker,\r\n            details: {}\r\n        });\r\n        marker.setAnimation(1);\r\n        // This method of feching Yelp Fusion requests is from https://forum.freecodecamp.org/t/authorization-http-header-for-yelp-fusion-api-access-token/140974/2.\r\n        const accessToken = 'vb8fpMmb4nk4mJ56e54L_meXsAmltZnPO4yWkCANzfxxzo5mlJD2tJ4XBU3LF-0yMEEnXLZH-QJM22W3Xa1RsE8a0bgFRF1kbPZoc6Z2pZxa7hkfj2yKEySqrhZkW3Yx';\r\n        fetch('https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?latitude=' + props.position.lat + '&longitude=' + props.position.lng, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + accessToken\r\n            }\r\n        }).then(res => res.json()).catch(() => this.setState({ error: true })).then(data => {\r\n            this.setState({\r\n                details: data.businesses[0]\r\n            });\r\n        });\r\n        setTimeout(() => {\r\n            marker.setAnimation(0);\r\n        }, 2000);\r\n    }\r\n    // If InfoWindow was closed or another was opened, deselect everything.\r\n    defaultSetup = () => {\r\n        this.setState({\r\n            details: {},\r\n            markerShowing: false,\r\n            clickedMarker: 0\r\n        });\r\n    }\r\n    // On clicking place that's on the list, call onMarkerClick with marker props and name.\r\n    showShop = (name) => {\r\n        this.onMarkerClick(this.state.markers.filter(marker => marker.props.name === name)[0].props, this.state.markers.filter(marker => marker.props.name === name)[0].marker);\r\n    }\r\n    // I wanted to update state based on previous marker and I got it working like this. I used https://forum.freecodecamp.org/t/react-prevstate/86495 to understand it's capabilities.\r\n    markerId = (id) => {\r\n        if (id !== 0) {\r\n            this.setState(prevState => ({\r\n                markers: [...prevState.markers, id]\r\n            }));\r\n        }\r\n    }\r\n    // Function for displaying and hiding search menu.\r\n    showMenu = () => {\r\n        this.state.toggle === '' ? this.setState({\r\n            toggle: 'open'\r\n        }) : this.setState({\r\n            toggle: ''\r\n        })\r\n    }\r\n    // On input change, set query to user input.\r\n    changeQuery = (query) => {\r\n        this.setState({\r\n            query: query\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            toggle,\r\n            query,\r\n            clickedMarker,\r\n            currentPlace,\r\n            places,\r\n            details,\r\n            markerShowing,\r\n            error\r\n        } = this.state;\r\n        return ( <\r\n            section role = 'application'\r\n            tabIndex = {\r\n                1\r\n            } > { /* I created SearchOption component to make this whole app more neat. */ } <\r\n            SearchOption toggle = {\r\n                toggle\r\n            }\r\n            showSearchBox = {\r\n                this.showMenu\r\n            }\r\n            query = {\r\n                query\r\n            }\r\n            changeQuery = {\r\n                this.changeQuery.bind(this)\r\n            }\r\n            places = {\r\n                places\r\n            }\r\n            showShop = {\r\n                this.showShop\r\n            }\r\n            />\r\n            { /* Map starts here. */ } <\r\n            GoogleMap query = {\r\n                query\r\n            }\r\n            places = {\r\n                places\r\n            }\r\n            markerInfo = {\r\n                this.onMarkerClick\r\n            }\r\n            clickedMarker = {\r\n                clickedMarker\r\n            }\r\n            currentPlace = {\r\n                currentPlace\r\n            }\r\n            details = {\r\n                details\r\n            }\r\n            defaultSetup = {\r\n                this.defaultSetup\r\n            }\r\n            markerShowing = {\r\n                markerShowing\r\n            }\r\n            markerId = {\r\n                this.markerId\r\n            }\r\n            error = {\r\n                error\r\n            }\r\n            /> <\r\n            /section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}